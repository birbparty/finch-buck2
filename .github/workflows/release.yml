name: Release

on:
  push:
    tags:
      - "v*"

env:
  BUILD_TYPE: Release

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get the version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          if [ -f CHANGELOG.md ]; then
            # Extract changelog for this version
            awk '/^## \['${{ steps.get_version.outputs.VERSION }}'\]/, /^## \[/{if(/^## \[/ && !/^## \['${{ steps.get_version.outputs.VERSION }}'\]/) exit; if(!/^## \['${{ steps.get_version.outputs.VERSION }}'\]/) print}' CHANGELOG.md > release_notes.md
          else
            echo "Release ${{ steps.get_version.outputs.VERSION }}" > release_notes.md
            echo "" >> release_notes.md
            echo "See commit history for changes in this release." >> release_notes.md
          fi

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          name: ${{ steps.get_version.outputs.VERSION }}
          body_path: release_notes.md
          draft: true
          prerelease: ${{ contains(steps.get_version.outputs.VERSION, '-rc') || contains(steps.get_version.outputs.VERSION, '-beta') || contains(steps.get_version.outputs.VERSION, '-alpha') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-release:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: linux-x86_64
            cc: gcc-11
            cxx: g++-11
          - os: macos-latest
            target: macos-x86_64
            cc: clang
            cxx: clang++
          - os: windows-latest
            target: windows-x86_64
            cc: clang
            cxx: clang++

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Get the version
        id: get_version
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build gcc-11 g++-11

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install ninja

      - name: Install system dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install ninja

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.14
        with:
          cmake-version: "3.20.x"

      - name: Configure CMake
        run: |
          cmake -B build \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
            -DCMAKE_C_COMPILER=${{ matrix.cc }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cxx }} \
            -DFINCH_BUILD_TESTS=OFF \
            -DCMAKE_INSTALL_PREFIX=install

      - name: Build
        run: cmake --build build --config ${{ env.BUILD_TYPE }} --parallel

      - name: Install
        run: cmake --install build --config ${{ env.BUILD_TYPE }}

      - name: Package (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cd install
          tar -czf ../finch-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}.tar.gz .
          cd ..

      - name: Package (Windows)
        if: runner.os == 'Windows'
        run: |
          cd install
          7z a ../finch-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}.zip .
          cd ..

      - name: Upload Release Asset (Linux/macOS)
        if: runner.os != 'Windows'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          files: finch-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset (Windows)
        if: runner.os == 'Windows'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          files: finch-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  finalize-release:
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    steps:
      - name: Mark release as published
        uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ needs.create-release.outputs.release_id }}
